# A valid snippet should starts with:
#
#		snippet trigger_word [ "description" [ options ] ]
#
# and end with:
#
#		endsnippet
#
# Snippet options:
#
#		b - Beginning of line.
#		i - In-word expansion.
#		w - Word boundary.
#		r - Regular expression
#		e - Custom context snippet
#		A - Snippet will be triggered automatically, when condition matches.
#
# Basic example:
#
#		snippet emitter "emitter properties" b
#		private readonly ${1} = new Emitter<$2>()
#		public readonly ${1/^_(.*)/$1/}: Event<$2> = this.$1.event
#		endsnippet
#
# Online reference: https://github.com/SirVer/ultisnips/blob/master/doc/UltiSnips.txt

snippet sfulw "Creates a stateful widget"
class $1 extends StatefulWidget {
  @override
  _$1State createState() => _$1State();
}

class _$1State extends State<$1> {
  @override
  Widget build(BuildContext context) {
    return Container(
      $0
    );
  }
}
endsnippet

snippet slessw "Create a stateless widget"
class $1 extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return Container(
      $0
    );
  }
}
endsnippet

snippet mtest "unit test file"
import 'package:flutter_test/flutter_test.dart';

void main() {
  test('$1', () {
    $0
  });
}
endsnippet

snippet al "app localizations"
AppLocalizations.of(context).
endsnippet


snippet mt "main theme"
MainTheme.of(context).
endsnippet

snippet wtest "widget test file"
import 'package:flutter_test/flutter_test.dart';

void main() {
  testWidgets('$1', (WidgetTester tester) async {
    $0
  });
}
endsnippet

snippet tw "test widget"
testWidgets('$1', (WidgetTester tester) async {
  $0
});
endsnippet

snippet mock "create mockito class"
class Mocked$1 extends Mock implements $1 {}
endsnippet

snippet ath "appTheme"
final appTheme = Provider.of<AppTheme>(context);
endsnippet

snippet rel "remote localizations"
final localizations = RemoteLocalizations.of(context);
endsnippet

snippet mat "marial import"
import 'package:flutter/material.dart';
endsnippet
